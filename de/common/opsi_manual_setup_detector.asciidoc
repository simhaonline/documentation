////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      1.8.2019
:Revision:  4.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-setup-detector]]
=== opsi Setup Detector (osd) (frei)

[[opsi-setup-detector-use-quickstart]]
==== opsi Setup Detector (osd) Quickstart

Nach dem erstmaliegen Start des osd erscheint ein Konfigurationsmaske.
Hier sind die folgenden Angaben erfrderlich:

* Name (Wird verwendet für Einträge in die changelog.txt)

* eMail (Wird verwendet für Einträge in die changelog.txt)

* Pfad zum Verzeichnis in dem die opsi-Pakete erstellt werden sollen.
Dies ist idealerweise der Pfad zu der Stelle an der die opsi_workbench Ihres opsi-servers gemountet ist.

.OSD Notwendige Konfiguration beim ersten Start
image::osd_config_dlg_de.png["Konfigurationsdialog",width=300]

Auf der Startseite wählen Se die gewünschte Aufgabe und folgen den Dialogen bzw. wählen den Button 'Nächste Schritt'.

.OSD Start
image::osd_page_start_de.png["Startpage",width=400]

[[opsi-setup-detector-introduction]]
==== Einführung: opsi Setup Detector (osd) Was ist das ? 

Die Erstellung von opsi-Paketen aus verfügbaren Setup-Programmen ist
eine wiederkehrende Aufgabe beim Betrieb von opsi.
Der osd soll Ihnen auf zwei Weisen helfen dies zu vereinfachen:

* Erkennung des Typ des Setup-Programms und die Ermittlung der dafür nötigen Kommandozeilen Parameter

* Erstellung eins opsi-Paketes mit den nötigen Skripten für Installation und Deinstallation.

* Gegenbenfalls Einbindung des opsi-package-builders zur weiteren Bearbeitung des estellten Paketes bzw. um das Paket zu bauen und zu installieren

Die meisten Setup-Programme werden von den Entwicklern nicht selbst geschrieben,
sondern basieren auf unterschiedlichen Frameworks. Der osd versucht nun in dem Setup-Programm Muster zufinden welche für bestimmte Frameworks spezifisch sind und anhand von diesen das Framework zu erkennen und damit die notwendigen Informationen zu ermitteln.

Das kann dazu führen, das Sie mit wenigen Klicks ein fertiges opsi-Paket bekommen. Häufig bekommen Sie ein opsi-Paket dem nach erstmaliger installation der Programms (z.B. mit dem erstelleten opsi-Paket) noch weite Informationen hinzugefügt werden müssen.

Natürlich kann es auch zu Problemen kommen.
Die gängigsten sind im Kapitel `Trouble Shooting` <<opsi-setup-detector-troubleshooting>> beschrieben.

Dort ist auch beschrieben wie Sie uns helfen können nach der Lösung eines Aufgetretenen Problems den osd besser zu machen.

[[opsi-setup-detector-installation]]
==== Installation des osd

Den osd gibt es derzeit für Windows und Linux.

Sie können den osd per opsi installieren:

Das Paket `opsi-setup-detector` gehört zu den opsi Standardprodukten und sollte auf Ihrem opsi-server installiert sein. Falls nicht, mit:

[source,prompt]
----
opsi-package-updater install opsi-setup-detector
----

können Sie es auf dem opsi-server installieren.

Ein Setup-Programm um den osd auch ohne opsi zu installieren, ist in vorbereitung.

Die Funktionalität der Linux-Version ist in folgen Features eingeschränkt,
da bestimmte Programm zur Analyse von Setup-Programmen aus bestimmten Frameworks nich für Linux zur verfügung stehen:

* Genauere Analyse von Inno-Setups mangels innounpack.exe für Linux

* Genauere Analyse von ####### mangels dark.exe für Linux

[[opsi-setup-detector-prerequires]]
==== Vorbereitung zur Verwendung des osd

Empfehlung:

* Sie sollten den share opsi_workbench ihres opsi-servers auf Ihrem Rechner gemountet haben.

* Sie sollten idealer weise den opsi-Package-Builder auf Ihrem Rechner installiert haben

[[opsi-setup-detector-opb-integration]]
==== Integration des opsi-package-builders durch den osd

.OSD Create and Build Modes
image::osd_page_create_modes_with_opb_de.png["Create and Build Modes",width=400]

Auf dem Tab `Erzeugen` finden Sie eine Auswahl für den Erstellungsmodus.
Der Default ist `Erstell opsi Produkt Dateien`

Wählen sie eines der anderen Modi, so wird ein installierter opsi-package-builder mit aufgerufen.

Im Falle von `... und baue opsi Paket` wird der opb im Hintergrund aufgerufen um das vom osd erstellte Verzeichnis mit den opsi Dateien zu einem Paket zu bauen. Dabei kann über die Checkboxen 'Bau Modus' ausgeählt werden, ob die Bau 'still'sein soll, ob das Paket gebaut werden soll und ob das gebaute Paket installiert werden soll.

Ohne eine dieser Optionen entspricht dieser Aufruf dem letzten Erstell Modus: 
'... und starte interaktiven Packagebuilder'

[[opsi-setup-detector-use]]
==== Verwendung des opsi Setup Detectors

[[opsi-setup-detector-use-start]]
===== Osd Start und notwendige Konfigurationen

Der OSD kann gestartet werden aus der Prorgramm Menü und findet sich dort unter `opsi.org`. Der osd wird unter Windows auch in das Kontextmenü des Explorers eingebundne, um so per Rechte Maustaste Setup-Programm direkt zur Analyse aufrufen zu können.

OSD Notwendige Konfiguration beim ersten Start
image::osd_config_dlg_de.png["Konfigurationsdialog",width=200]

Nach dem erstmaliegen Start des osd erscheint ein Konfigurationsmaske.
Hier sind die folgenden Angaben erfrderlich:

* Name (Wird verwendet für Einträge in die changelog.txt)

* eMail (Wird verwendet für Einträge in die changelog.txt)

* Pfad zum Verzeichnis in dem die opsi-Pakete erstellt werden sollen.
Dies ist idealerweise der Pfad zu der Stelle an der die opsi_workbench Ihres opsi-servers gemountet ist.

.OSD Start
image::osd_page_start_de.png["Startpage",width=400]

Auf der Startseite wählen Se die gewünschte Aufgabe und folgen den Dialogen bzw. wählen den Button 'Nächste Schritt'.

Die Angebotenen Aufgaben:

. `Analysiere einzelne Setup Datei und erzeuge ein opsi Paket` +
Hier wird von einer Setup-Datei ausgegangen und der gesamte Ablauf bis zur Erzeugung eines opsi-Paketes durchlaufen. Dieser Prozeß ist im nächsten Kapitel beschrieben.

. `Analysiere zwei Setup Dateien (32 und 64 Bit) und erzeuge ein opsi Paket` +
Verläuft analog zu dem obigen Punkt 1 mit folgenden Unterschieden: +
Es werden zwei Setupprogramme für die Architekturen 32 und 64 Bit abgefragt und anlaysiert. Das Produkt bekommt ein zusätzliches Property: `install_architecture` mit den möglichen Werten: `32bitonly`, `64bitonly`, `both`, `systemspecific`.

. `Analysiere einzelne setup Datei` +
erläuft analog zu dem obigen Punkt 1 nur das nach der Analyse des Setup-Programms abgebrochen wird.

. `Eine opsi Paketvorlage (Template) erzeugen` +
Dieser Punkt fragt nicht nach einer Setup-Datei, sondern erstellt ein Template analog dem opsi-Produkt `opsi-template` nur das hier die Angaben aus der Produktkonfiguration bereits übernommen werden.

[[opsi-setup-detector-use-single-analyze-and-create]]
===== Osd: Analysiere einzelne setup Datei und erzeuge ein opsi Paket 

.OSD Start
image::osd_page_start_de.png["Startpage",width=500]

.OSD Analyse
image::osd_page_analyze_de.png["Analyse",width=500]

.OSD Ergebnis der Analyse
image::osd_page_setup1_de.png["Ergebnis der Analyse",width=500]

* Erkannter Setup Typ: Typ des erkannten Installer

* MST allowed: 

* Link mit Infos zum Installer

* Setup Datei: Pfad und Name der analysierten Setup-Datei

* MST Datei: Bei MSI-Installern oder Installern welche MSI enthalten, kann hier eine MST-Datei angegeben werden welche in den MSI Aufruf integriert wird.

* MsiId: Bei MSI-Installern oder Installern welche MSI enthalten, der MSI-Produktcode

* Software Version: Die Version der zu installierenden Software soweit ermittelbar

* Setup Datei Größe MB: Größe der Setup Datei in MB

* Benötigter Platz MB: Dieser Wert ist eine Schätzung aus sechsmal die Größe der Setup-Datei und kann gegebenenfalls angepasst werden

* InstallDir: Soweit erkannt das Verzeichnis in das die Software installiert werden wird

* Unattended Installationskommando: Das ermittelte Kommando zu einer nicht interaktiven Installation

* Unattended Deinstallationskommando: Das ermittelte Kommando zu einer nicht interaktiven Deinstallation

* Deinstallations Programm: Das ermittelte Deinstallations Programm

.OSD Produktkonfiguration 1
image::osd_page_product1_de.png["Produktkonfiguration 1",width=500]

* *opsi Product ID:* dies ist der Name des zu erzeugenden opsi Paketes und wird aus dem weiter unten stehenden Produkt Namen erzeugt, wobei Leerzeichen und andere ungültigen Zeichen durch ein '-' ersetzt werden. Die vorgeschlagene opsi Product ID kann natürlich geändert werden.
* *Produkt Name:* der Name der zu installierenden Software. Dieser muss evtl. händig korrigiert werden
* *Produkt Version:* die aus dem Name der Setup-Datei ermittelte Versionsnummer muss wahrscheinlich händig korrigiert werden. Sie darf nur Ziffern und Punkte enthalten, da sie für die Versionierung des opsi Paketes verwendet wird.

* *Beschreibung:* In diesem Feld wird als Vorgabe der Produkt Name vorgegeben und sollte mit weiteren Hinweisen ergänzt werden, die dann als Produktbeschreibung des opsi Paketes gesetzt werden.
* *Lizenz pflichtig:* Wenn dieses Häkchen gesetzt wird, wird beim Patchen des opsiscripts '$LicenseRequired$=true' gesetzt.

.OSD Produktkonfiguration 2
image::osd_page_product2_de.png["Produktkonfiguration 2",width=500]

.OSD Produkt erzeugen
image::osd_page_create_de.png["Produkt erzeugen",width=500]

* 'Pfad zur opsi-workbench' ist ein Laufwerksbuchstabe oder UNC Pfad auf dem der share `opsi_workbench` Ihres opsi-servers gemounted ist.
* aus Sicherheitsgründen kann ein opsi Paket nur dann neu erzeugt werden, wenn es noch nicht vorhanden ist. Falls ein bestehendes Paket überschrieben werden soll, muss zuerst das Verzeichnis von der opsi Workbench gelöscht werden.

Links neben dem Button 'Erzeuge opsi Paket' befinden sich drei mögliche Auswahl Optionen, die sich auf die Funktion des Buttons beziehen:

`Erstellungs Modus` ist ein Auswahlbereich bei dem die Vorgänge bei der Paketerstellung bestimmt werden können:

* `Erstelle opsi Produkt Dateien` erzeugt falls noch nicht vorhanden, den Verzeichnisbaum für das neue opsi Paket auf der gewählten `opsi-Workbench`. Die für das Pakte benötigten Dateien werden erzeugt bzw. kopiert.

* `Erstelle opsi Produkt Dateien und baue opsi Paket` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `opsi Package Builder` aufgerufen um aus dem erstellen Verzeichnisbaum das opsi-Paket zu erstellen. Die genauen Abläufe werden dabei duch das Auswahlfeld `Baumodus` bestimmt:

** `nur bauen` startet den `opsi Package Builder` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket und beendet den `opsi Package Builder` nach getaner Arbeit wieder.

** `bauen und installieren` startet den `opsi Package Builder` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket installiert das Paket per Server Befehl `opsi-package-manager` und beendet den `opsi Package Builder` nach getaner Arbeit wieder.

* `Erstelle opsi Produkt Dateien und starte interaktiven Pakagebuilder` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `opsi Package Builder` interaktiv aufgerufen. +
Sie müssen diesen selbst beenden um zu dem `opsi-setup-detector` zurückzukehren
Zu Installation, Konfiguration und Bedienung des Community Projektes 'opsi Packet Builder' siehe https://forum.opsi.org/viewforum.php?f=22

* `opsi-Paket erstellen` ist der Button welcher die Paketerstellung veranlasst.
Aus Sicherheitsgründen kann ein opsi Paket nur dann neu erzeugt werden, wenn es noch nicht vorhanden ist. Ist bereits ein Paket mit diesem Namen vorhanden, so erscheint eine Rückfrage ob das vorhandene Verzeichnis gelöscht werden darf.


[[opsi-setup-detector-use-double-analyze-and-create]]
===== Osd: Analysiere zwei setup Dateien (32 und 64 Bit) und erzeuge ein opsi Paket 

.OSD Ergebnis der Analyse des zweiten Setupprogramms
image::osd_page_setup2_de.png["Ergebnis der Analyse 2",width=500]

Dieser Punkt entspricht dem oben beschriebenen `Analysiere einzelne setup Datei und erzeuge ein opsi Paket` mit der folgenden Ergänzung: +
Es werden zwei Setupprogramme für die Architekturen 32 und 64 Bit abgefragt und anlaysiert. Das Produkt bekommt ein zusätzliches Property: `install_architecture` mit den möglichen Werten: `32bitonly`, `64bitonly`, `both`, `systemspecific`.


[[opsi-setup-detector-use-single-analyze-only]]
===== Osd: Analysiere einzelne setup Datei 

Dieser Punkt entspricht dem oben beschriebenen `Analysiere einzelne setup Datei und erzeuge ein opsi Paket` mit der folgenden Einschränkung: +
Nach der Analyse wird der Vorgang abgebrochen.

[[opsi-setup-detector-use-template-create]]
===== Osd: Eine opsi Paketvorlage (Template) erzeugen

Dieser Punkt entspricht dem oben beschriebenen `Analysiere einzelne setup Datei und erzeuge ein opsi Paket` mit der folgenden Einschränkung: +
es wird nicht nach einer Setup Datei gefragt und damit entfällt auch die Analyse. Vielmehr wird eine allgemeine Scriptvorlage erzeugt.

[[opsi-setup-detector-configuration]]
==== Osd: Konfiguration

.OSD Konfiguration
image::osd_config_dlg_de.png["Konfigurationsdialog",width=300]

.Geforderte Konfigurationen:

* Name +
(Wird verwendet für Einträge in die changelog.txt)

* eMail +
(Wird verwendet für Einträge in die changelog.txt)

* Pfad zur opsi-work-bench +
Pfad zum Verzeichnis in dem die opsi-Pakete erstellt werden sollen.
Dies ist idealerweise der Pfad zu der Stelle an der die opsi_workbench Ihres opsi-servers gemountet ist.

* "Pfad zum OpsiPackageBuilder +
Der OpsiPackageBuilder wird verwendet um via ssh die opsi Pakete auf dem opsi-server zu bauen. siehe auch: \n"
"https://forum.opsi.org/viewtopic.php?f=22&t=7573\n"  
////
"Path to the OpsiPackageBuilder. OpsiPackageBuilder is used to build the opsi packages via ssh. see: https://forum.opsi.org/viewtopic.php?f=22&t=7573"
////

.Programmverhalten

* createradioindex +
Auswahl des RadioButtons 'Erstellungs Modus'
////
selects the Create mode Radiobutton
////

 buildadioindex +
Auswahl des RadioButtons 'Bau Modus'
////
selects the Build mode Radiobutton
////

.Modifikation des Produkts:

* import_libraries +
Liste der opsi-script Bibliotheken. +
Eine pro Zeile. Darf leer sein. Beispiel: +
`myInstallhelperlib.opsiscript`
////
List of opsi-script libraries that have to be imported. +
One per line. May be empty. Example: +
`myinstallhelperlib.opsiscript`
////

*Konfigurationen bei denen Sie opsi-scriptcode für bestimmte stellen eingeben können*: +
opsi-script code Zeilen welche eingefügt werden
Ein opsi-script Befehl pro Zeile. Darf leer sein. Beispiel: +
comment \"Installation finished..."
////
List of opsi-script code lines that should be included. +
One per line. May be empty. Example: +
comment "Installation finished..."
////

* postinstalllines +
Zeilen welche nach dem Ende der Installation eingefügt werden.
////
Lines that should be included after the installation finished.
////

############################
#: osdconfigdlg.rspostuninstalllines
#, fuzzy
msgctxt "osdconfigdlg.rspostuninstalllines"
msgid ""
"List of opsi-script code lines that should be included after the uninstallation finished.\n"
"One per line. May be empty. Example:\n"
"comment \"Uninstall finished...\"\n"
msgstr ""
"opsi-script code Zeilen welche nach dem Ende der Deinstallation eingefügt werden.\n"
"Ein opsi-script Befehl pro Zeile. Darf leer sein. Beispiel:\n"
"comment \"Uninstall finished...\"\n"

#: osdconfigdlg.rspreinstalllines
#, fuzzy
msgctxt "osdconfigdlg.rspreinstalllines"
msgid ""
"List of opsi-script code lines that should be included before the installation starts. \n"
"One per line. May be empty. Example: \n"
"comment \"Start the installation ...\"\n"
msgstr ""
"opsi-script code Zeilen welche vor dem Begrinn der Installation eingefügt werden.\n"
"Ein opsi-script Befehl pro Zeile. Darf leer sein. Beispiel:\n"
"comment \"Start the installation ...\"\n"

#: osdconfigdlg.rspreuninstalllines
#, fuzzy
msgctxt "osdconfigdlg.rspreuninstalllines"
msgid ""
"List of opsi-script code lines that should be included before the uninstallation starts.\n"
"One per line. May be empty. Example:\n"
"comment \"Start the uninstallation ...\"\n"
msgstr ""
"opsi-script code Zeilen welche vor dem Beginn der Deinstallation eingefügt werden.\n"
"Ein opsi-script Befehl pro Zeile. Darf leer sein. Beispiel:\n"
"comment \"Start the uninstallation ...\"\n"

#: osdconfigdlg.rsregisterinfilemanager
#, fuzzy
msgctxt "osdconfigdlg.rsregisterinfilemanager"
msgid "Should this program be registred to the Filemanger (Explorer) context menu ?"
msgstr "Soll dieses Programm für das Kontextmenü des Dateimanagers (Explorer) registriert werden ?"

#: osdconfigdlg.rsworkbench_mounted
#, fuzzy
msgctxt "osdconfigdlg.rsworkbench_mounted"
msgid "Automatically detected. Is the opsi workbench reachable at workbench_Path."
msgstr "Automatisch erkannt. Ist die opsi-work-bench unter dem angegebenen Pfad 'workbench_path' erreichbar."

################################################

[[opsi-setup-detector-customizing]]
==== Osd: Anpassung an eigene Bedüfnisse

# has to be written


[[opsi-setup-detector-troubleshooting]]
==== Osd: Probleme und Lösungen

Der osd ist so designt, das es möglichst einfach ist ihn kontinuierlich weiter zupflegen und zu erweitern. Bestimmte Anpassungsmöglichkeiten und Hilfen bei Problemen werden Ihnen im folgenden vorgestellt. +
Haben Sie Ideen und /oder Wünsche darüberhinaus so nehmen Sie bitte zu uns Kontakt auf (info@uib.de) - wir freuen uns über jede Anregung.


[[opsi-setup-detector-troubleshooting-logging]]
===== Logging

Der osd erzeugt Logdateien unter
`c:\opsi.org\applog\opsisetupdetector.log`. +
Ältere Logdateien liegen im selben Verzeichnis als  `opsisetupdetector_0.log` bis `opsisetupdetector_8.log`.

Die Logdatei wird sehr groß, weil sie die kompletten Daten der Analyse der Setupdatei(en) enthält. Zur Analyse der Logdatei empfehlen wir den `opsi-log-viewer` oder einen anderen Editor welcher die nicht benötigten Loglevel ausblenden kann, da die im Setup gefundenen Textmuster (auf Loglevel 8) in vielen Fällen nicht intressieren. 

[[opsi-setup-detector-troubleshooting-lang]]
===== Sprachunterstützung

Beim Start des Programmes wird automatisch ermittelt, unter welcher Sprache das Windows System läuft. Wenn für die Sprache eine passende Sprachdatei gefunden wird, wird diese verwendet. Wird keine unterstützte Sprache gefunden, so wird Englisch verwendet. +
Sie können die Sprache wählen über den Menüpunkt `Languages` bzw. beim Aufruf über den Kommandozeilen Parameter `--lang=xx` wobei `xx` für die gewählte Sprache steht.

Derzeit unterstützt der 'opsi Setup Detector' : +

* Deutsch 
* Englisch
* Spanisch

Weitere Sprachen können recht einfach über eine entsprechend zu übersetzende Sprachdatei nachgerüstet werden. +
Die Übersetzungen erfolgen über das Portal: 
https://www.transifex.com/opsi-org/ +
Wir freuen uns über Ihre Unterstützung

[[opsi-setup-detector-troubleshooting-unknown-installer]]
===== Unknown Installer

Sicher werden Sie im Rahmen der Arbeit mit dem osd mal auf die Meldung `Unkonown Installer` stoßen. Dann hat der osd das Installer-Framework mit dem dieser Installer gemacht ist nicht erkannt. +
Vorschläge: +
* Prüfen Sie ob es tatsächlich ein Installer ist. (Klingt blöd, ist mir aber selbst schon mal so gegangen)
* Suchen Sie im Internet nach den Stichwörtern 'silent' und Produktname
* Vielleicht helfen die Links auf dieser Seite weiter: +
https://forum.opsi.org/wiki/doku.php?id=userspace:software_integration_web_links

Wenn Sie das Problem gelöst haben, lassen Sie uns (und die opsi Community) an Ihrem Wissen und Erfahrung teilhaben
Das neue (interne) Design des osd macht es möglich vergleichweise leicht neue Installer aufzunehmen. Was wir benötigen ist : +
* Beispiel Setupprogramm
* Hersteller bzw. typische Kommandozeilen Schalte für Installation und Deinstalltion
* Informative Links zu dem Problem

[[opsi-setup-detector-troubleshooting-wrong-installer]]
===== Falsch Erkennung

Gerade im Rahmen der zunehmenden Anzahl von unterstützten (also erkannten) Installern führt auch schonmal zu einer Falscherkennung. +
Die passiert insbesondere dann gerne wenn ein Installer mehrere Softwarekomponenten umfasst welche wiederum mit unterschiedlichen Installern gepackt sind. +
Sollten Sie ein solches Problem entdecken, so informieren Sie uns bitte und halten das entsprechende Beispiel und die richtige Lösung bereit.

[[opsi-setup-detector-troubleshooting-bugs]]
===== Programmfehler

Sollte der osd Dinge tun die er nicht sollte, so sichern Sie bitte die dazu passendende Logdatei aus `c:\opsi.org\applog\` (siehe  auch: <<opsi-setup-detector-troubleshooting-logging>>) und informieren Sie uns über das Problem auf info@uib.de. Halsten Sie auch die Beispieldatei bereit, da wir diese eventuell benötigen um das Problem nachzuvollziehen.

[[opsi-setup-detector-troubleshooting-sorce]]
===== Source Code und Lizenz

Der osd ist Lizenziert unter der AGPLv3.

Den Sourcode finden Sie unter: +

* https://github.com/opsi-org/lazarus/tree/master/opsi-misc/opsisetupdetector

* https://gitlab.com/opsi-org
