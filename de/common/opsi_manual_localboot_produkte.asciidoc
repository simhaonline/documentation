////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; http://creativecommons.org/licenses/by-sa/3.0/de/
; http://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; http://creativecommons.org/licenses/by-sa/3.0/
; http://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      31.03.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localboot-products]]
=== Localboot-Produkte: Automatische Softwareverteilung mit opsi

Als Localboot-Produkte werden alle Produkte bezeichnet die nach einem lokalen
Boot des Rechners über den '{opsi-client-agent}' installiert werden. Dies im Gegensatz
zu den weiter unten beschriebenen Netboot Produkten <<opsi-manual-netboot-products>>.


[[opsi-manual-localboot-standardprodukte]]
==== opsi Standardprodukte

Die folgenden Localboot Produkte gehören zur Grundausstattung von opsi.

[[opsi-manual-localboot-opsi-client-agent]]
===== '{opsi-client-agent}'

Der '{opsi-client-agent}' ist der Clientagent von opsi und weiter oben ausführlich
beschrieben: siehe Kapitel <<opsi-manual-clientagent>>.

[[opsi-manual-localboot-opsi-winst]]
===== '{opsi-winst}'

Das Produkt '{opsi-winst}' ist ein Spezialfall. Es enthält den aktuellen '{opsi-winst}'.
Dieser muss zur Aktualisierung nicht auf setup gestellt werden. Vielmehr prüft
ein Teil der '{opsi-client-agent}' bei jedem Start, ob auf dem Server eine andere
Version des '{opsi-winst}' verfügbar ist und holt sich diese im Zweifelsfall.

[[opsi-manual-localboot-javavm]]
===== javavm: Java Runtime Environment

Das Produkt javavm stellt die für den '{opsi-configed}' benötigte Java
Laufzeitumgebung für die Clients zur Verfügung.

[[opsi-manual-localboot-opsi-configed]]
===== opsi-configed

opsi Graphical Management Interface als Applikation
Für Windows und Linux.
Siehe auch Kapitel: <<opsi-manual-configed>>

[[opsi-manual-localboot-jedit]]
===== jedit

Java basierter Editor mit Syntax Highlighting für '{opsi-winst}' Scripte.

[[opsi-manual-localboot-swaudit_hwaudit]]
===== swaudit + hwaudit: Produkte zur Hard- und Software-Inventarisierung

Die Produkte hwaudit und swaudit dienen der Hard- bzw. Software-Inventarisierung.
Bei der Hardware-Inventarisierung werden die Daten über WMI erhoben und über den
'{opsi-webservice}' an den Server zurück gemeldet.
Bei der Software-Inventarisierung werden die Daten aus der Registry
(HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall)
erhoben und über den '{opsi-webservice}' an den Server zurück gemeldet.

[[opsi-manual-localboot-opsi-template]]
===== opsi-template

Template zur Erstellung eigener opsi-Scripts.
Sie können das Template extrahieren mit
[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi
----
oder auch dabei gleich umbenennen mit
[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

Siehe auch opsi-getting-started Manual.

[[opsi-manual-localboot-opsi-template-with-admin]]
===== opsi-template-with-admin

Template zur Erstellung eigener opsi-Scripts.
Sie können das Template extrahieren mit
[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi
----
oder auch dabei gleich umbenennen mit
[source, prompt]
----
opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod
----

Siehe auch opsi-winst-manual / opsi-script-manual +
Kapitel: 'Skript für Installationen im Kontext eines lokalen Administrators'

[[opsi-manual-localboot-shutdownwanted]]
===== shutdownwanted

Fährt den Rechner herunter, wenn keine weiteren Aktionen mehr gesetzt sind.

[[opsi-manual-localboot-opsi-script-test]]
===== opsi-script-test

Große Sammlung von opsi-script Selbsttests. Diese kann als Beispielsammlung für
funktionirende Aufrufe von opsi-script Befehlen verwendet werden.


[[opsi-manual-localboot-opsi-wim-capture]]
===== opsi-wim-capture

Siehe auch Kapitel: <<opsi-manual-wimcap>>

[[opsi-manual-localboot-opsi-winpe]]
===== opsi-winpe

Produkt zur einfachen Erzeugung eine opsi-winpe
Siehe auch opsi-getting-started Manual, Kapitel 'Erstellen eines PE'.

[[opsi-manual-localboot-opsi-uefi-netboot]]
===== opsi-uefi-netboot

Siehe auch Kapitel: <<opsi-manual-uefi>>


[[opsi-manual-localboot-opsi-set-win-uac]]
===== opsi-set-win-uac

Setzt den UAC-Level via opsi.

[[opsi-manual-localboot-opsi-setup-detector]]
===== opsi-setup-detector

Siehe auch Kapitel: <<opsi-setup-detector>>

[[opsi-manual-localboot-opsi-logviewer]]
===== opsi-logviewer

Text viewer mit Filter nach Loglevel und Events. +
Für Windows und Linux.

* Das von uib erstellte Tool opsi-logviewer öffnet jetzt auch Dateien,
die u.a. in den Archivformaten zip oder gzip komprimiert wurden.
Damit können dann Logdateien, die platzsparend als Archiv zugeschickt werden,
direkt betrachtet werden. (Enthält ein Archiv mehrere Dateien, werden die Inhalte aneinandergehängt.)

* Das Setup.Skript  ist um eine Linux-Unterstützung erweitert,
so dass der opsi-logviewer auch auf einem Linux-Client automatisiert installiert werden kann.

* Die neue before-Abhängigkeit zu javavm sichert die Funktion des Startaufrufs (weil javavm die javaw.exe ins Systemverzeichnis kopiert)




[[opsi-manual-localboot-config-win10]]
===== config-win10

Konfiguriert verschiedene Windows 10 Einstellungen wie z.B.
Sperrbildschirm, Hibernationboot, Telemetrie und Update-Verhalten.

In der Version 4.0.7 kamen neue Deaktivierungsmöglichkeiten hinzu.

* *change_power_plan* energieeinstellungen ändern.

* *config-updates* erlaubt es die Quelle der Updates zu Ändern. Die Updates werden dann entweder direkt von Microsoft Servern, einem lokalen Peer-To-Peer Netz oder einem Peer-To-Peer Netz aus dem Internet geladen. Die Option 'disable' ist derweil über ein eigenes Property namens 'disable_updates' ermöglicht.

* *defer_upgrade* verschiebt Updates und Upgrades. Updates können um vier Wochen und Upgrades um acht Monate verschoben werden. Hierbei ist zu beachten das sicherheitsrelevante Updates trotz 'defer' Option installiert werden. Featureupdates hingegen werden nicht installiert.

* *disable_advertising_id* deaktiviert die sogenannte Advertising ID. Diese speichert Daten über den Browserverlauf um benutzerspezifische Werbung einzublenden.

* *disable_cortana* deaktiviert den Cortana Sprachassistenten. Dieser sammelt diverse Daten über Eingaben und überträgt diese Daten an Server von Microsoft.

* *disable_customer_experience* deaktiviert das Sammeln von Daten im Bezug auf Daten zur Anwendungsverwendung.

* *disable_defender* deaktiviert den mit Windows 10 mitgelieferten Antivirenschutz namens 'Defender'

* *disable_fast_boot* deaktiviert den Schnellstart und sorgt damti dafür, dass das Standard opsi-event gui_startup sauber funktioniert.

* *disable_font_streaming* sorgt dafür, dass nicht auf dem System installierte Fonts über das Internet nachgeladen werden.

* *disable_handwriting_share* Eine Besonderheit ist die Verwendung von Windows 10 auf Tablet-PCs. Hierbei werden Daten über Handschriften gesammelt und an einen Microsoft Server gesendet.

* *disable_location_sensors* deaktiviert das Sammeln von Daten über die aktuelle  Geoposition des Geräts.

* *disable_lock_screen* Sperrbildschirm deaktivieren.

* *disable_mac* deaktiviert einen Dienst, welcher Daten über derzeitig eingeloggte User sammelt und zu Microsoft überträgt.

* *disable_mrt* deaktiviert die Verwendung des 'Malware Removal Tool', kurz MRT. Dieser Dienst scannt in regelmäßigen Abständen vorhandene Dateien auf der Festplatte des Rechners und vergleicht diese mit einer Liste von potentiell gefährlicher Software.

* *disable_onedrive_sync* deaktiviert die OneDrive Dateisynchronisation.

* *disable_sending_feedback* ermöglicht es die Übertragung von Daten an Microsoft bei Fehlverhalten von Anwendungen zu beeinflussen.

* *disable_smbv1* deaktiviere Protokoll smbv1.

* Mit *disable_telemetry* ist es möglich die Menge der gesammelten Daten zu limitieren. Standardmässig werden sehr viele Daten übertragen. Wenn das Property auf 'true' gesetzt wird, wird Windows so eingestellt, das nur noch sicherheitsrelevante Daten übertragen werden. Dies ist die niedrigste Stufe. Diese Security Stufe kann nur in der Windows 10 Enterprise und LTSB Version eingestellt werden. In den anderen Versionen von Windows 10 wird die nächst niedrige Stufe angewendet, Basic.

* *disable_updates* kappt bei der Option 'true' die Verbindung zu Update Informationsquellen. Somit werden keine Updates gefunden per Updater. 'false' ermöglicht die Verbindung zu Updatequellen.

* *disable_wifi_sense* ermöglich es den 'Wifi Sense' genannten Dienst zu deaktivieren. Dieser Dienst ermöglicht es gespeicherte WLAN Konfigurationen mit Kontakten zu teilen. +

* *flashplayer_autorun*: Es gibt in Verbindung von Windows 10 mit dem Adobe Flashplayer eine Sicherheitslücke. Es wird empfohlen das Autorun-Feature des Flashplayers zu deaktivieren. Mit 'false' wird der Flashplayer nicht mehr gestartet

* *online_search*: Bei jeder Suche über die integrierte Suchleiste in der Taskleiste werden auch Online-Ergebnisse geliefert. 'true' ermöglich  eine solche online Suche, 'false' verweigert diese.

* *sync_settings*: Wenn man Windows 10 in Kombination mit einem Microsoft Account nutzt, ist es möglich seine Einstellungen mit dem aktuellen Microsoft Konto zu synchronisieren. Setzt man das property 'sync_settings' auf 'false' wird dies deaktiviert.


[source, prompt]
----
[ProductProperty]
type: bool
name: disable_fast_boot
description: Disable Fastboot for proper opsi startup
default: True

[ProductProperty]
type: bool
name: disable_lock_screen
default: True

[ProductProperty]
type: bool
name: disable_telemetry
description: Disable telemetry data transmission
default: True

[ProductProperty]
type: bool
name: disable_cortana
description: Disable Cortana assistant
default: True

[ProductProperty]
type: bool
name: disable_customer_experience
description: Disable customer experience program
default: True

[ProductProperty]
type: bool
name: disable_mrt
description: Disable Malicious Software Removal Tool
default: True

[ProductProperty]
type: unicode
name: config_updates
multivalue: False
editable: False
description: Set Windows-Update behavior
values: ["AllowPeerToPeer", "LocalPeerToPeer", "MicrosoftOnly"]
default: ["MicrosoftOnly"]

[ProductProperty]
type: bool
name: disable_mac
description: Disable Microsoft Account communication
default: False

[ProductProperty]
type: bool
name: disable_advertising_id
description: Disable Microsoft Advertising ID
default: False

[ProductProperty]
type: bool
name: disable_updates
description: Disable Windows Updates
default: False

[ProductProperty]
type: bool
name: disable_defender
description: Disable Microsoft Windows Defender
default: False

[ProductProperty]
type: bool
name: disable_wifi_sense
description: Disable Wi-Fi Sense
default: False

[ProductProperty]
type: bool
name: disable_sending_feedback
description: Disable sending feedback and diagnostics
default: False

[ProductProperty]
type: bool
name: disable_font_streaming
description: Disable font streaming of not installed fonts
default: False

[ProductProperty]
type: bool
name: defer_upgrade
description: Defer Windows 10 Upgrade
default: True

[ProductProperty]
type: bool
name: flashplayer_autorun
description: Adobe Flashplayer: allow autorun?
default: False

[ProductProperty]
type: bool
name: location_sensors
description: Disable location and sensor detection
default: True

[ProductProperty]
type: bool
name: online_search
description: Disable online search during file or command search
default: True

[ProductProperty]
type: bool
name: disable_handwrite_sharing
description: Tablet-PC: Disable sharing of handriting information
default: True

[ProductProperty]
type: bool
name: sync_settings
description: Sync settings with AccountID
default: False
----
[[opsi-manual-localboot-config-winbase]]
===== config-winbase

Paket zum Customizing der Grundeinstellungen von Oberfläche, Explorer usw..

[[opsi-manual-localboot-product-order]]
==== Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten

Seit opsi 4.0 wird die Installationsreihenfolge vom {opsi-server} unter
Berücksichtigung von Produktabhängigkeiten und Produktprioritäten berechnet.

* Produktabhängigkeiten +
definieren Abhängigkeiten und notwendige Installationsreihenfolgen zwischen
{opsi-product-packages}n. Typische Beispiel ist die Abhängigkeit von Java Programmen von der Java Laufzeitumgebung (javavm).

* Produktprioritäten +
dienen dazu, bestimmte Pakete in der Installationsreihenfolge nach vorne oder nach hinten zu schieben. So ist es z.B. sinnvoll Servicepacks und Patches
an den Anfang einer Installation zu legen und eine Softwareinventarisierung an
das Ende. +
Produktprioritäten sind Zahlen zwischen 100 und -100 (0 ist default)

Wie diese beiden Faktoren gegeneinander gewichtete werden sollen kann
unterschiedlich gesehen werden. Daher stellt opsi zwei Algorithmen zur Verfügung.

Die Umstellung zwischen diesen Algorithmen erfolgt entweder:

im '{opsi-configed}', in der Server-Konfiguration

.'{opsi-configed}': Serverkonfiguration
image::configed_serverconfiguration.png[width=500]

oder auf der Kommandozeile mit folgendem Befehl:
[source, prompt]
----
opsi-setup --edit-config-defaults
----

.Wählen des Sortieralgorithmus: Teil 1
image::opsi-setup-product_sort_algorithm.png[width=300]

.Wählen des Sortieralgorithmus: Teil 2
image::opsi-setup-product_sort_algorithm2.png[width=300]

[[opsi-manual-localboot-product-order-algorithm1]]
===== Algorithm1: Produktabhängigkeit vor Priorität (Default)

Bei diesem Algorithmus werden zunächst die Produkte anhand Ihrer Prioritäten sortiert und dann aufgrund der Produktabhängigkeiten nochmals umsortiert. Hierdurch kann natürlich ein Produkt mit sehr niedriger Priorität weit nach vorne geschoben werden weil es von einem anderen Produkt als 'required before' benötigt wird. Auf der anderen Seite wird vermieden das es zu Installationsproblemen aufgrund nicht aufgelöster Produktabhängigkeiten kommt. +
Der Algorithmus 1 sorgt dafür, das die Installationsreihenfolge konstant ist, unabhängig davon wieviele Produkte auf setup stehen. Diese Reihenfolge entspricht der Reihenfolge welche im configed angezeigt wird wenn die Produkte nach der Spalte Position sortiert werden. +
Damit ist gesichert, dass
bei einer mit "ExitWindows /immediateReboot" nur unterbrochenen Abarbeitung eines setup-Skripts nach dem Reboot
direkt die Bearbeitung des unterbrochenen Skripts weitergeführt wird.

[[opsi-manual-localboot-product-order-algorithm2]]
===== Algorithm2: Produktpriorität vor Abhängigkeit

Dieser Algorithmus geht von dem Gedanken aus, dass es in der Praxis im wesentlichen drei Prioritätsklassen gibt:

*      Produkte, welche am Anfang installiert werden sollen wie z.B. OS-Patches und Treiber, durch die der PC in seinen Standard-Zustand gebracht wird. Wird realisiert durch Zuweisen einer hohen Priorität (maximal +100).

*      "Normale" Produkte, die Anwendungen installieren (Default-Priorität 0).

*      Produkte, die möglichst am Ende eingespielt werden sollen wie z.B. Softwareinventariserung. Realisiert durch Zuweisen einer niedrigen Priorität (niedrigste mögliche -100).

Die Auflösung der Produktabhängigkeiten erfolgt nur innerhalb einer Prioritätsklasse. Hierdurch ist sichergestellt, dass Produkte mit einer hohen Priorität auch tatsächlich am Anfang installiert werden. Prioritätsklassen übergreifende Produktabhängigkeiten werden nicht berücksichtigt bzw. führen zu einer Warnung. Daher ist beim Packen zu beachten, dass Produktabhängigkeiten nur innerhalb einer Prioritätsklasse definiert werden.

Die Produktabhängigkeiten werden hier so interpretiert, dass sie bei "normalen" Produkten automatisch zu einer konsistenten, alle Abhängigkeiten berücksichtigenden Reihenfolge führen. Wurden widersprüchliche (zirkuläre) Abhängigkeiten definiert, wird ein Fehler angezeigt.

Bei den für die PC-Einrichtung grundlegenden Produkten mit hohen Prioritäten wird dagegen der Administrator – ähnlich wie etwa bei Unix-Startskripten – die genaue Reihenfolge von Hand festlegen, indem er pro Produkt entsprechend der gewünschten Reihenfolge je eine spezifische Priorität zwischen +100 und +1 setzt. Ähnliches gilt für die finalen Produkte mit niedrigen Prioritäten.



[[opsi-manual-localboot-product-order-create]]
===== Erstellung von Prioritäten und Produktabhängigkeiten

Prioritäten und Produktabhängigkeiten gehören zu den Meta-Daten eines {opsi-product}es. Diese werden bei der Erstellung eines Produktes mit dem Befehl `opsi-newprod` abgefragt.

Diese Metadaten werden im control file des Produktes abgelegt und können dort editiert werden. Nach einer Veränderung im control file muss das Produkt neu gepackt und installiert werden.

Siehe hierzu auch das Kapitel 'Erstellen eines opsi-Product-Paketes' im opsi-getting-started Handbuch.


[[opsi-manual-localboot-own_software]]
==== Einbindung eigener Software in die Softwareverteilung von opsi

Die Anleitung zur Einbindung eigener Software finden Sie im Handbuch opsi-getting-started.


