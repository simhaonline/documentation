////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      1.8.2019
:Revision:  4.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-setup-detector]]
=== opsi Setup Detector (free)

[[opsi-setup-detector-use-quickstart]]
==== opsi Setup Detector Quickstart

After the first start of the opsi-setup-detector a configuration mask appears.
The following information is required:

* Name (Used for entries in the changelog.txt)

* Email (Used for entries in the changelog.txt)

* Path to the directory in which the opsi packages are going to be created.
This is ideally the path to the place where the opsi_workbench of your opsi-server is mounted.

.opsi-setup-detector Needed configurations at the first start
image::osd_config_dlg_en.png["Configuration dialog",width=300]

At the start page select the desire task and follow the dialogs (click 'Next step')

.opsi-setup-detector Start
image::osd_page_start_en.png["Startpage",width=400]

[[opsi-setup-detector-introduction]]
==== Introduction: opsi Setup Detector (opsi-setup-detector) What is this ?

The creation of opsi-packages from available setup programs is
a recurring task when operating opsi.
The opsi-setup-detector should help you to simplify this in two ways:

* Detection of the type of the setup program and the determination of the necessary command line parameters

* Creation of an opsi package with the necessary scripts for installation and deinstallation.

* If necessary, include the opsi-package-builder for further processing of the provided package or to build and install the package.

Most setup programs are not written by the developers themselves,
but are based on different frameworks. The opsi-setup-detector now tries to find patterns in the setup program which are specific for certain frameworks and to recognize the framework on the basis of these and thus to determine the necessary information.

This can lead to you getting a finished opsi package with just a few clicks. Often you get an opsi-package to which you have to add further information after the first installation of the program (e.g. with the created opsi-package).

Of course there can also be problems.
The most common are described in the chapter `Trouble Shooting` <<opsi-setup-detector-troubleshooting>>
There is also described how you can help us to improve the opsi-setup-detector after solving a problem.

[[opsi-setup-detector-installation]]
==== Installation of the opsi-setup-detector

The opsi-setup-detector is currently available for Windows and Linux.

You can install the opsi-setup-detector via opsi:

The package `opsi-setup-detector` belongs to the opsi standard products and should be installed on your opsi-server. If not, use:

[source,prompt]
----
opsi-package-updater install opsi-setup-detector
----

to install it on the opsi-server.

A setup program to install the opsi-setup-detector without opsi is in the works.

The functionality of the Linux version is limited,
since certain programs for analyzing setup programs from certain frameworks are not available for Linux:

* More detailed analysis of Inno-Setups due to the lack of innounpack.exe for Linux

* More detailed analysis of wix-setups due to the lack of dark.exe for Linux

[[opsi-setup-detector-prerequires]]
==== Requirements in order to use the opsi-setup-detector

Recommendation:

* You should have mounted the share opsi_workbench of your opsi-server on your computer.

* Ideally you should have the opsi-Package-Builder installed on your computer.

[[opsi-setup-detector-opb-integration]]
==== Integration of the opsi-package-builder through the opsi-setup-detector

.opsi-setup-detector Create and Build Modes
image::osd_page_create_modes_with_opb_en.png["Create and Build Modes",width=400]

On the tab `Create` you will find a selection for the creation mode.
The default is `Create opsi product files`.

If you choose one of the other modes, an installed opsi-package-builder will be called.

In case of `... and build opsi package` the opb is called in the background to build the directory created by the opsi-setup-detector with the opsi files to a package. The checkboxes 'Build mode' can be used to select whether the build should be 'silent', if the package should be built and if the built package should be installed.

Without any of these options, this call corresponds to the last build mode:
'... and start interactive package builder'.

[[opsi-setup-detector-use]]
==== Usage of the opsi setup detector

[[opsi-setup-detector-use-start]]
===== Opsi-setup-detector Start and necessary configurations

The opsi-setup-detector can be started from the programs menu and can be found there under `opsi.org`. Under Windows the opsi-setup-detector is also integrated into the context menu of the explorer in order to call the setup program directly for analysis with the right mouse button.

.opsi-setup-detector Necessary configuration on first startup
image::osd_config_dlg_en.png["Configuration dialog",width=200]

After the first start of the opsi-setup-detector a configuration mask appears.
The following information is required here:

* Name (Used for entries in the changelog.txt)

* Email (Used for entries in the changelog.txt)

* Path to the directory in which the opsi packages should be created.
This is ideally the path to the place where the opsi_workbench of your opsi-server is mounted.

.opsi-setup-detector Start
image::osd_page_start_en.png["Startpage",width=400]

On the main window, select the desired task and follow the dialogs or select the 'Next step' button.

The offered tasks:

. `Analyze single setup file and create an opsi package` +
Here, a setup file is analyzed and the entire process is run until an opsi package is created. This process is described in the next chapter.

. `Analyze two setup files (32 and 64 bit) and create an opsi package` +
The procedure is the same as in point 1 above with the following differences: +
Two setup programs for the 32 and 64 bit architectures are queried and analyzed. The product gets an additional property: `install_architecture` with the possible values: `32bitonly`, `64bitonly`, `both`, `systemspecific`.

. `Analyze single setup file` +
runs, similarly to point 1 above, only that is aborted after the analysis of the setup program.

. `Create an opsi package template` +
This point does not ask for a setup file, but creates a template similar to the opsi product `opsi-template` only that here the information from the product configuration is already taken over.

[[opsi-setup-detector-use-single-analyze-and-create]]
===== Opsi-setup-detector: Analyze single setup file and create an opsi package

.opsi-setup-detector Start
image::osd_page_start_en.png["Startpage",width=500]

.opsi-setup-detector analysis
image::osd_page_analyze_en.png["Analysis",width=500]

.opsi-setup-detector Result of the analysis
image::osd_page_setup1_en.png["Result of analysis",width=500]

* Detected Setup Type: Type of detected Installer

* MST allowed:

* Link with information about the installer

* Setup file: Path and name of the analyzed setup file

* MST file: For MSI installers or installers which contain MSI, an MST file can be specified here which will be integrated into the MSI call.

* MsiId: For MSI installers or installers that contain MSI in the form of product code

* Software version: The version of the software to be installed if determinable.

* Setup file size MB: Size of the setup file in MB

* Required space MB: This value is an estimate of six times the size of the setup file and can be adjusted if necessary

* InstallDir: As far as detected the directory where the software will be installed.

* Unattended installation command: The determined command for a non-interactive installation.

* Unattended deinstallation command: The determined command for a non-interactive deinstallation.

* Deinstallations program: The determined deinstallations program

.opsi-setup-detector Product configuration 1
image::osd_page_product1_en.png["Product configuration 1",width=500]

* *opsi Product ID:* this is the name of the opsi package to be generated and is generated from the product name below, where spaces and other invalid characters are replaced by a '-'. The proposed opsi Product ID can of course be changed.
* *Product Name:* the name of the software to install. This may have to be corrected manually.
* *Product Version:* The version number determined from the name of the setup file must probably be corrected manually. It may only contain numbers and periods, since it's used for the versioning of the opsi package.

* *Description:* In this field the product name is given as default and should be completed with further hints, which are then set as product description of the opsi package.
* *License required:* If this checkbox is set, '$LicenseRequired$=true' will be set when patching the opsiscript.

.opsi-setup-detector Product configuration 2
image::osd_page_product2_en.png["Product configuration 2",width=500]

.opsi-setup-detector create product
image::osd_page_create_en.png["Create product",width=500]

* 'Path to opsi-workbench' is a drive letter or UNC path where the share `opsi_workbench` of your opsi-server is mounted.
* For security reasons, an opsi package can only be rebuilt if it doesn't exist already. If an existing package is to be overwritten, the directory must first be deleted from the opsi Workbench.

To the left of the button 'Create opsi package' there are three possible options, which refer to the function of the button:

Create Mode' is a selection area where you can specify what happens when creating the package:

* `Create opsi product files` creates the directory tree for the new opsi package on the selected `opsi workbench` if it does not already exist. The files required for the package will be created or copied.

* `Create opsi product files and build package` performs the operations described in the first point. +
Additionally, the `opsi Package Builder` is called to create the opsi package from the created directory tree. The exact processes are determined by the selection field `Tree mode`:

** `Only build` starts the `opsi Package Builder` without interactive GUI, creates an opsi package from the directory tree via server command `opsi-makepackage` and terminates the `opsi Package Builder` after work is done.

** `build and install` starts the `opsi Package Builder` without interactive GUI, creates from the directory tree via server command `opsi-makepackage` an opsi package installs the package via server command `opsi-package-manager` and finishes the `opsi Package Builder` after the work is done.

* `Create opsi product files and start interactive package builder` performs the operations listed in the first item. +
Additionally the `opsi Package Builder` is called interactively. +
You have to quit it yourself to return to the `opsi-setup-detector`.
For installation, configuration and operation of the community project 'opsi Package Builder' check https://forum.opsi.org/viewforum.php?f=22

* `Create opsi package` is the button that initiates the package creation.
For security reasons, an opsi package can only be rebuilt if it doesn't exist already. If a package with this name already exists, you will be asked if the existing directory may be deleted.

[[opsi-setup-detector-use-double-analyze-and-create]]
===== Opsi-setup-detector: Analyze two setup files (32 and 64 bit) and create one opsi package

.opsi-setup-detector Result of the analysis of the second setup program
image::osd_page_setup2_en.png["Result of analysis 2",width=500]

This item corresponds to the `Analyze single setup file described above and create an opsi package` with the following addition: +
Two setup programs for the 32 and 64 bit architectures are queried and analyzed. The product gets an additional property: `install_architecture` with the possible values: `32bitonly`, `64bitonly`, `both`, `systemspecific`.

[[opsi-setup-detector-use-single-analyze-only]]
===== Opsi-setup-detector: Analyze single setup file

This item corresponds to the `Analyze single setup file described above and create an opsi package` with the following restriction: +
After the analysis the process will be aborted.

[[opsi-setup-detector-use-template-create]]
===== Opsi-setup-detector: Create an opsi package template

This item corresponds to the `Analyze single setup file described above and create an opsi package` with the following restriction: +
it does not ask for a setup file and therefore the analysis is not necessary. Rather a general script template is created.

[[opsi-setup-detector-configuration]]
==== Opsi-setup-detector: Configuration

.opsi-setup-detector: Configuration
image::osd_config_dlg_en.png["Configuration dialog",width=300]

.Required configurations:

* Name +
(Used for entries in the changelog.txt)

* Email +
(Used for entries in the changelog.txt)

* Path to the opsi-workbench +
Path to the directory in which the opsi packages should be created.
This is ideally the path to the place where the opsi_workbench of your opsi-server is mounted.

* Path to the OpsiPackageBuilder +
////
The OpsiPackageBuilder is used to build the opsi packages on the opsi-server via ssh. see also: \n"
"https://forum.opsi.org/viewtopic.php?f=22&t=7573\n"
////
Path to the OpsiPackageBuilder. OpsiPackageBuilder is used to build the opsi packages via ssh. see: https://forum.opsi.org/viewtopic.php?f=22&t=7573"

.Program behavior

* createradioindex +
////
Auswahl des RadioButtons 'Erstellungs Modus'
////
selects the Create mode Radiobutton


* buildadioindex +
////
Auswahl des RadioButtons 'Bau Modus'
////
selects the Build mode Radiobutton



* registerinfilemanager +
////
Soll dieses Programm für das Kontextmenü des Dateimanagers (Explorer) registriert werden ?
////
Should this program be registred to the Filemanger (Explorer) context menu ?


* workbench_mounted +
////
Automatisch erkannt. Ist die opsi_workbench unter dem angegebenen Pfad 'workbench_path' erreichbar.
////
Automatically detected. Is the opsi workbench reachable at workbench_Path.


.Modification of the product:

* import_libraries +
////
Liste der opsi-script Bibliotheken. +
Eine pro Zeile. Darf leer sein. Beispiel: +
`myInstallhelperlib.opsiscript`
////
List of opsi-script libraries that have to be imported. +
One per line. May be empty. Example: +
`myinstallhelperlib.opsiscript`

*Configurations where you can enter opsi-script code for certain jobs*: +
opsi-script code lines which will be inserted. +
////
Ein opsi-script Befehl pro Zeile. Darf leer sein. +
Beispiel: +
`comment "Installation finished..."`
////
List of opsi-script code lines that should be included. +
One per line. May be empty. Example: +
`comment "Installation finished..."`


* preinstall lines +
////
opsi-script code Zeilen welche vor dem Beginn der Installation eingefügt werden.
////
opsi-script code lines that should be included before the installation starts.


* postinstall lines +
////
Zeilen welche nach dem Ende der Installation eingefügt werden.
////
Lines that should be included after the installation finished.


* preuninstall lines +
////
opsi-script code Zeilen welche vor dem Beginn der Deinstallation eingefügt werden.
////
opsi-script code lines that should be included before the uninstallation starts.


* postuninstall lines +
////
opsi-script code Zeilen welche nach dem Ende der Deinstallation eingefügt werden.
////
opsi-script code lines that should be included after the uninstallation finished.

[[opsi-setup-detector-customizing]]
==== Opsi-setup-detector: Adaptation to your own requirements

# has to be written


[[opsi-setup-detector-troubleshooting]]
==== Opsi-setup-detector: Problems and solutions

The opsi-setup-detector is designed in such a way that it is as easy as possible to be continuously maintained and expanded. +
Certain customization options and help with problems are presented in the following. +
If you have ideas and / or wishes beyond that, please contact us at (info@uib.de) - we are looking forward to your suggestions.

[[opsi-setup-detector-troubleshooting-logging]]
===== Logging

The opsi-setup-detector creates log files under
`c:\opsi.org\applog\opsisetupdetector.log`. +
Older log files are located in the same directory as `opsisetupdetector_0.log` to `opsisetupdetector_8.log`.

The log file becomes very large because it contains the complete data of the analysis of the setup file(s). For the analysis of the log file we recommend the `opsi-log-viewer` or another editor which can hide the unneeded log levels, because the text patterns found in the setup (on log level 8) in many cases are not so relevant.

[[opsi-setup-detector-troubleshooting-lang]]
===== Language support

When the program is started, the language of the Windows system is automatically determined. If a suitable language file is found for the language, it is used. If no supported language is found, English is used. +
You can select the language via the menu item `Languages` or via the command line parameter `--lang=xx` where `xx` stands for the selected language.

Currently the 'opsi setup detector' supports : +

* German
* English
* Spanish

Additional languages can be easily added to be translated via a language file. +
Translations are done via the portal:
https://www.transifex.com/opsi-org/ +
We look forward to your support

[[opsi-setup-detector-troubleshooting-unknown-installer]]
===== Unknown Installer

Surely you will come across the message `Unknown Installer` while working with the opsi-setup-detector. Then the opsi-setup-detector did not recognize the installer framework with which this installer was made. +
Suggestions: +

* Check if the file is really an installer. (Sounds stupid, but it happened to me already)

* Search the Internet for the keywords 'silent' and product name

* Maybe the links on this page will help you: +
https://forum.opsi.org/wiki/doku.php?id=userspace:software_integration_web_links

Once you have solved the problem, let us, (and the opsi community) know about experience. +
The new (internal) design of the opsi-setup-detector makes it possible to easily add new installers. What we need is : +

* Example setup program

* Manufacturer or typical command line Switch for installation and uninstallation

* Informative links to the problem

[[opsi-setup-detector-troubleshooting-wrong-installer]]
===== False detection

Especially in the context of the increasing number of supported (i.e. detected) installers, false detection can occur. +
This happens especially when an installer contains several software components which are packed with different installers. +
Should you discover such a problem, please inform us and have the appropriate example and the correct solution ready.

[[opsi-setup-detector-troubleshooting-bugs]]
===== Program error

If the opsi-setup-detector behaves strangely or does something unexpected, please backup the corresponding log file from `c:\opsi.org\applog\` (see also: <<opsi-setup-detector-troubleshooting-logging>>) and inform us about the problem at info@uib.de. Also have the sample file ready, as we may need it to reproduce the problem.

[[opsi-setup-detector-troubleshooting-sorce]]
===== Source Code and License

The opsi-setup-detector is licensed under the AGPLv3.

The source code can be found under: +

* https://github.com/opsi-org/lazarus/tree/master/opsi-misc/opsisetupdetector

* https://gitlab.com/opsi-org
